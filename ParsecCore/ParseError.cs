using System.Collections.Generic;
using System.Linq;
using System.Text;
using ParsecCore.Help;
using ParsecCore.Input;
using ParsecCore.MaybeNS;

namespace ParsecCore
{
    /// <summary>
    /// Represents an error which occured during parsing
    /// </summary>
    public abstract partial class ParseError
    {
        public abstract Position Position { get; set; }

        public abstract ParseError Combine(ParseError other);

        internal abstract ParseError ResolveCombine(StandardError error);
        internal abstract ParseError ResolveCombine(CustomError error);
    }

    /// <summary>
    /// Standard error generated by the parser itself during parsing.
    /// </summary>
    public sealed class StandardError : ParseError
    {
        public StandardError(Position position, IMaybe<ErrorItem> unexpected, IEnumerable<ErrorItem> expected)
        {
            _position = position;
            _unexpected = unexpected;
            _expected = expected;
        }

        public override Position Position { get => _position; set => _position = value; }

        public override ParseError Combine(ParseError other)
        {
            return other.ResolveCombine(this);
        }

        internal override ParseError ResolveCombine(StandardError error)
        {
            return new StandardError(
                Position,
                CombineUnexpected(_unexpected, error._unexpected),
                _expected.Union(error._expected)
            );
        }
        internal override ParseError ResolveCombine(CustomError error)
        {
            return error;
        }

        /// <summary>
        /// We only merge unexpected errors in case both errors occurred at the same position. Therefore we choose
        /// the one which is more specific (exists or contains a longer prefix of the input)
        /// </summary>
        /// <param name="left"> One of the unexpected errors </param>
        /// <param name="right"> One of the unexpected errors </param>
        /// <returns> The unexpected error which is more specific </returns>
        private static IMaybe<ErrorItem> CombineUnexpected(IMaybe<ErrorItem> left, IMaybe<ErrorItem> right)
        {
            if (left.IsEmpty)
            {
                return right;
            }

            if (right.IsEmpty)
            {
                return left;
            }

            return left.Value.Size >= right.Value.Size ? left : right;
        }

        private Position _position;
        private readonly IMaybe<ErrorItem> _unexpected;
        private readonly IEnumerable<ErrorItem> _expected;
    }

    /// <summary>
    /// Custom error specified by the user.
    /// </summary>
    public sealed class CustomError : ParseError
    {
        public CustomError(Position position, IEnumerable<FancyError> customErrors)
        {
            _position = position;
            _customs = customErrors;
        }

        public override Position Position { get => _position; set => _position = value; }

        public override ParseError Combine(ParseError other)
        {
            return other.ResolveCombine(this);
        }

        internal override ParseError ResolveCombine(StandardError error)
        {
            return this;
        }
        internal override ParseError ResolveCombine(CustomError error)
        {
            return new CustomError(Position, _customs.Union(error._customs));
        }

        private Position _position;
        private readonly IEnumerable<FancyError> _customs;
    }
}
